/***************************************************************
* file: QuarterProject245.java
* author: Daniel Fierros
* author: Troy Dome
* 
* class: CS 245 â€“ GUI
*
* assignment: program 1 version 1
* date last modified: 08/10/2016
*
* purpose: This program is a hangman game that begins with a splash screen for 3 seconds
* then enters the menu panel. Once at the menu panel the user has 3 options: (1)Play (2)High Score (3)Credits.
* Once the play button is pressed the Hangman game begins with setting up the start display, then the user presses the 
* desired letter.If the user guesses wrong 6 times, then the program ends, as well as when the user correctly guesses the word.
* The High score button displays all the possible high scores(this does not update for now). The credits button displays the
* authors.
****************************************************************/ 
package teamsnow;


import java.awt.Color;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.UIManager;


/**
 *
 * @author Troy
 */

public class QuarterProject245 extends javax.swing.JFrame {

    /**
     * method:QuarterProject245
     * Purpose:Constructor that Creates new form and sets the arrays with the proper words
     */
    public QuarterProject245()
    {
        initComponents();
        this.words = new String[]{"abstract", "cemetery", "nurse", "pharmacy", "climbing"};
        this.colors = new String[]{"red","blue","yellow","purple","green"};
    }
    /**
     * method:initComponents
     * purpose:The methods that are in the generated code is the portion for the design area .
     */
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        SplashPage = new javax.swing.JPanel();
        ProjectTitle = new javax.swing.JLabel();
        TeamName = new javax.swing.JLabel();
        MainMenu = new javax.swing.JPanel();
        PlayButton = new javax.swing.JButton();
        HighScoresButton = new javax.swing.JButton();
        CreditsButton = new javax.swing.JButton();
        TeamLogo = new javax.swing.JLabel();
        CreditsMenu = new javax.swing.JPanel();
        backButton0 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        HighScoresMenu = new javax.swing.JPanel();
        backButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        highscore1 = new javax.swing.JLabel();
        highscore2 = new javax.swing.JLabel();
        highscore3 = new javax.swing.JLabel();
        highscore4 = new javax.swing.JLabel();
        PlayMenu = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        skipButton = new javax.swing.JButton();
        aButton = new javax.swing.JButton();
        bButton = new javax.swing.JButton();
        cButton = new javax.swing.JButton();
        dButton = new javax.swing.JButton();
        eButton = new javax.swing.JButton();
        fButton = new javax.swing.JButton();
        gButton = new javax.swing.JButton();
        hButton = new javax.swing.JButton();
        iButton = new javax.swing.JButton();
        jButton = new javax.swing.JButton();
        kButton = new javax.swing.JButton();
        LButton = new javax.swing.JButton();
        mButton = new javax.swing.JButton();
        sButton = new javax.swing.JButton();
        tButton = new javax.swing.JButton();
        uButton = new javax.swing.JButton();
        vButton = new javax.swing.JButton();
        oButton = new javax.swing.JButton();
        wButton = new javax.swing.JButton();
        pButton = new javax.swing.JButton();
        xButton = new javax.swing.JButton();
        yButton = new javax.swing.JButton();
        zButton = new javax.swing.JButton();
        qButton = new javax.swing.JButton();
        nButton = new javax.swing.JButton();
        rButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabelHangman = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabelSpcae = new javax.swing.JLabel();
        jLabelLetter1 = new javax.swing.JLabel();
        jLabelLetter3 = new javax.swing.JLabel();
        jLabelLetter2 = new javax.swing.JLabel();
        jLabelLetter4 = new javax.swing.JLabel();
        jLabelLetter5 = new javax.swing.JLabel();
        jLabelLetter6 = new javax.swing.JLabel();
        jLabelLetter7 = new javax.swing.JLabel();
        jLabelLetter8 = new javax.swing.JLabel();
        PointAndClickGame = new javax.swing.JPanel();
        jLabelPACClock = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabelColor = new javax.swing.JLabel();
        jButtonC1 = new javax.swing.JButton();
        jButtonC2 = new javax.swing.JButton();
        jButtonC3 = new javax.swing.JButton();
        jButtonC4 = new javax.swing.JButton();
        jButtonC5 = new javax.swing.JButton();
        End = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        bTMButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        HighScoreSet = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        doneButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(600, 400));
        setResizable(false);

        mainPanel.setMaximumSize(new java.awt.Dimension(600, 400));
        mainPanel.setPreferredSize(new java.awt.Dimension(600, 400));
        mainPanel.setLayout(new java.awt.CardLayout());

        SplashPage.setMinimumSize(new java.awt.Dimension(600, 400));
        SplashPage.setPreferredSize(new java.awt.Dimension(600, 400));
        /*
        methods: ActionListener listen1 and listen2
        purposes: Instances of setting the timer for the splash page,
        so it may switch to the main menu after 3 seconds,
        and the date+time implementation for the play page.
        */
        ActionListener listen = new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
                //Put card layout here
                CardLayout card = (CardLayout)mainPanel.getLayout();
                card.show(mainPanel, "mainmenuCard");
            }
        };

        Timer t = new Timer(3000, listen);
        t.setRepeats(false);
        t.start();

        ActionListener listen2 = new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
                //Continuously update time here
                SimpleDateFormat bub = new SimpleDateFormat("MMMMMMMMM dd, yyyy  HH:mm:ss");
                Date current = new Date();
                String theDate = bub.format(current);
                jLabel11.setText(theDate);
            }
        };

        Timer tDate = new Timer(500, listen2);
        tDate.start();

        ProjectTitle.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        ProjectTitle.setText("CS 245 Project: Summer 2016");

        TeamName.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        TeamName.setText("By: Team Snow");

        javax.swing.GroupLayout SplashPageLayout = new javax.swing.GroupLayout(SplashPage);
        SplashPage.setLayout(SplashPageLayout);
        SplashPageLayout.setHorizontalGroup(
            SplashPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SplashPageLayout.createSequentialGroup()
                .addGroup(SplashPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SplashPageLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(ProjectTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SplashPageLayout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(TeamName)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SplashPageLayout.setVerticalGroup(
            SplashPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SplashPageLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(ProjectTitle)
                .addGap(106, 106, 106)
                .addComponent(TeamName, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(128, 128, 128))
        );

        mainPanel.add(SplashPage, "splashCard");
        //CardLayout card = (CardLayout)mainPanel.getLayout();
        //card.show(mainPanel, "mainmenuCard");

        MainMenu.setMaximumSize(new java.awt.Dimension(600, 400));
        MainMenu.setMinimumSize(new java.awt.Dimension(600, 400));
        MainMenu.setPreferredSize(new java.awt.Dimension(600, 400));

        PlayButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        PlayButton.setText("Play");
        PlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayButtonActionPerformed(evt);
            }
        });

        HighScoresButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        HighScoresButton.setText("High Scores");
        HighScoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HighScoresButtonActionPerformed(evt);
            }
        });

        CreditsButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        CreditsButton.setText("Credits");
        CreditsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreditsButtonActionPerformed(evt);
            }
        });

        TeamLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/teamlogo.png"))); // NOI18N
        TeamLogo.setText("jLabel1");

        javax.swing.GroupLayout MainMenuLayout = new javax.swing.GroupLayout(MainMenu);
        MainMenu.setLayout(MainMenuLayout);
        MainMenuLayout.setHorizontalGroup(
            MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TeamLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreditsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HighScoresButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PlayButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        MainMenuLayout.setVerticalGroup(
            MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TeamLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(PlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HighScoresButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CreditsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainPanel.add(MainMenu, "mainmenuCard");

        CreditsMenu.setMaximumSize(new java.awt.Dimension(600, 400));
        CreditsMenu.setMinimumSize(new java.awt.Dimension(600, 400));

        backButton0.setText("Back");
        backButton0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton0ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("CREDITS");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Troy Dome, 009572849");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Daniel Fierros, 009061390");

        javax.swing.GroupLayout CreditsMenuLayout = new javax.swing.GroupLayout(CreditsMenu);
        CreditsMenu.setLayout(CreditsMenuLayout);
        CreditsMenuLayout.setHorizontalGroup(
            CreditsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreditsMenuLayout.createSequentialGroup()
                .addGroup(CreditsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreditsMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton0))
                    .addGroup(CreditsMenuLayout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addGroup(CreditsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(207, Short.MAX_VALUE))
        );
        CreditsMenuLayout.setVerticalGroup(
            CreditsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreditsMenuLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                .addComponent(backButton0)
                .addContainerGap())
        );

        mainPanel.add(CreditsMenu, "creditsCard");

        HighScoresMenu.setMaximumSize(new java.awt.Dimension(600, 400));
        HighScoresMenu.setMinimumSize(new java.awt.Dimension(600, 400));
        HighScoresMenu.setPreferredSize(new java.awt.Dimension(600, 400));

        backButton1.setText("Back");
        backButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel4.setText("HIGH SCORES");

        highscore1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        highscore1.setText("ABC ... 00000");

        highscore2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        highscore2.setText("ABC ... 00000");

        highscore3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        highscore3.setText("ABC ... 00000");

        highscore4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        highscore4.setText("ABC ... 00000");

        javax.swing.GroupLayout HighScoresMenuLayout = new javax.swing.GroupLayout(HighScoresMenu);
        HighScoresMenu.setLayout(HighScoresMenuLayout);
        HighScoresMenuLayout.setHorizontalGroup(
            HighScoresMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HighScoresMenuLayout.createSequentialGroup()
                .addGroup(HighScoresMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HighScoresMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton1))
                    .addGroup(HighScoresMenuLayout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addGroup(HighScoresMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(highscore1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(highscore2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(highscore3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(highscore4, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(198, Short.MAX_VALUE))
        );
        HighScoresMenuLayout.setVerticalGroup(
            HighScoresMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HighScoresMenuLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(highscore1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(highscore2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(highscore3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(highscore4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                .addComponent(backButton1)
                .addContainerGap())
        );

        mainPanel.add(HighScoresMenu, "highscoresCard");

        PlayMenu.setMaximumSize(new java.awt.Dimension(600, 400));
        PlayMenu.setMinimumSize(new java.awt.Dimension(600, 400));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 30)); // NOI18N
        jLabel9.setText("HangMan");

        skipButton.setText("Skip");
        skipButton.setName("skip"); // NOI18N
        skipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipButtonActionPerformed(evt);
            }
        });

        aButton.setText("A");
        aButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aButtonActionPerformed(evt);
            }
        });

        bButton.setText("B");
        bButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bButtonActionPerformed(evt);
            }
        });

        cButton.setText("C");
        cButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cButtonActionPerformed(evt);
            }
        });

        dButton.setText("D");
        dButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dButtonActionPerformed(evt);
            }
        });

        eButton.setText("E");
        eButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eButtonActionPerformed(evt);
            }
        });

        fButton.setText("F");
        fButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fButtonActionPerformed(evt);
            }
        });

        gButton.setText("G");
        gButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gButtonActionPerformed(evt);
            }
        });

        hButton.setText("H");
        hButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hButtonActionPerformed(evt);
            }
        });

        iButton.setText("I");
        iButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iButtonActionPerformed(evt);
            }
        });

        jButton.setText("J");
        jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActionPerformed(evt);
            }
        });

        kButton.setText("K");
        kButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kButtonActionPerformed(evt);
            }
        });

        LButton.setText("L");
        LButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LButtonActionPerformed(evt);
            }
        });

        mButton.setText("M");
        mButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonActionPerformed(evt);
            }
        });

        sButton.setText("S");
        sButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sButtonActionPerformed(evt);
            }
        });

        tButton.setText("T");
        tButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tButtonActionPerformed(evt);
            }
        });

        uButton.setText("U");
        uButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uButtonActionPerformed(evt);
            }
        });

        vButton.setText("V");
        vButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vButtonActionPerformed(evt);
            }
        });

        oButton.setText("O");
        oButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oButtonActionPerformed(evt);
            }
        });

        wButton.setText("W");
        wButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wButtonActionPerformed(evt);
            }
        });

        pButton.setText("P");
        pButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButtonActionPerformed(evt);
            }
        });

        xButton.setText("X");
        xButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xButtonActionPerformed(evt);
            }
        });

        yButton.setText("Y");
        yButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yButtonActionPerformed(evt);
            }
        });

        zButton.setText("Z");
        zButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zButtonActionPerformed(evt);
            }
        });

        qButton.setText("Q");
        qButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qButtonActionPerformed(evt);
            }
        });

        nButton.setText("N");
        nButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nButtonActionPerformed(evt);
            }
        });

        rButton.setText("R");
        rButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Date goes here");

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel15.setText("Score");

        jLabelLetter1.setText("   ");

        jLabelLetter3.setText("   ");

        jLabelLetter2.setText("   ");

        jLabelLetter4.setText("   ");

        jLabelLetter5.setText("   ");

        jLabelLetter6.setText("   ");

        jLabelLetter7.setText("   ");

        jLabelLetter8.setText("   ");

        javax.swing.GroupLayout PlayMenuLayout = new javax.swing.GroupLayout(PlayMenu);
        PlayMenu.setLayout(PlayMenuLayout);
        PlayMenuLayout.setHorizontalGroup(
            PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PlayMenuLayout.createSequentialGroup()
                        .addComponent(aButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PlayMenuLayout.createSequentialGroup()
                        .addGroup(PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PlayMenuLayout.createSequentialGroup()
                                .addComponent(nButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelSpcae, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PlayMenuLayout.createSequentialGroup()
                        .addComponent(jLabelLetter1)
                        .addGap(21, 21, 21)
                        .addComponent(jLabelLetter2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelLetter3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelLetter4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelLetter5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelLetter6)
                        .addGap(33, 33, 33)
                        .addComponent(jLabelLetter7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelLetter8))
                    .addGroup(PlayMenuLayout.createSequentialGroup()
                        .addGroup(PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PlayMenuLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(109, 109, 109)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11))
                            .addGroup(PlayMenuLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabelHangman, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skipButton)))
                        .addGap(15, 15, 15))))
        );
        PlayMenuLayout.setVerticalGroup(
            PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlayMenuLayout.createSequentialGroup()
                .addGroup(PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlayMenuLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9))
                    .addGroup(PlayMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PlayMenuLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelHangman, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PlayMenuLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(skipButton)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLetter1)
                    .addComponent(jLabelLetter3)
                    .addComponent(jLabelLetter2)
                    .addComponent(jLabelLetter4)
                    .addComponent(jLabelLetter5)
                    .addComponent(jLabelLetter6)
                    .addComponent(jLabelLetter8)
                    .addComponent(jLabelLetter7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSpcae, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aButton)
                    .addComponent(bButton)
                    .addComponent(cButton)
                    .addComponent(dButton)
                    .addComponent(eButton)
                    .addComponent(fButton)
                    .addComponent(gButton)
                    .addComponent(hButton)
                    .addComponent(iButton)
                    .addComponent(jButton)
                    .addComponent(kButton)
                    .addComponent(LButton)
                    .addComponent(mButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PlayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nButton)
                    .addComponent(oButton)
                    .addComponent(pButton)
                    .addComponent(qButton)
                    .addComponent(rButton)
                    .addComponent(sButton)
                    .addComponent(tButton)
                    .addComponent(uButton)
                    .addComponent(vButton)
                    .addComponent(wButton)
                    .addComponent(xButton)
                    .addComponent(yButton)
                    .addComponent(zButton))
                .addGap(15, 15, 15))
        );

        ActionListener listen3 = new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
                //Continuously update score

                jLabel15.setText("Score:" + score);

                if (randNumber == 2)
                {
                    //short spaces
                    jLabelSpcae.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/nSpace.png")));
                }
                else
                {
                    //long spaces
                    jLabelSpcae.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/longSpace.png")));
                }
                if(count ==0)
                {
                    jLabelHangman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/startScreen.png")));
                }

                else if(count ==1)
                {
                    jLabelHangman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/hmp1.png")));
                }
                else if(count == 2)
                {
                    jLabelHangman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/hmp3.png")));
                }
                else if(count == 3)
                {
                    jLabelHangman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/hmp4.png")));
                }
                else if(count == 4)
                {
                    jLabelHangman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/hmp5.png")));
                }
                else if(count == 5)
                {
                    jLabelHangman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/hmp6.png")));
                }
                else if(count == 6)
                {
                    jLabelHangman.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/hmp7.png")));
                }

                switch(randNumber)
                {
                    case 0:
                    if (wordCount == 8)
                    {
                        CardLayout card = (CardLayout)mainPanel.getLayout();
                        card.show(mainPanel, "PACgameCard");

                    }
                    break;
                    case 1:
                    if (wordCount == 8)
                    {
                        CardLayout card = (CardLayout)mainPanel.getLayout();
                        card.show(mainPanel, "PACgameCard");

                    }
                    break;
                    case 2:
                    if (wordCount == 5)
                    {
                        CardLayout card = (CardLayout)mainPanel.getLayout();
                        card.show(mainPanel, "PACgameCard");

                    }
                    break;
                    case 3:
                    if (wordCount == 8)
                    {
                        CardLayout card = (CardLayout)mainPanel.getLayout();
                        card.show(mainPanel, "PACgameCard");

                    }
                    break;
                    case 4:
                    if (wordCount == 8)
                    {
                        CardLayout card = (CardLayout)mainPanel.getLayout();
                        card.show(mainPanel, "PACgameCard");

                    }
                    break;
                }

            }
        };
        Timer tScore = new Timer(0, listen3);
        tScore.start();

        mainPanel.add(PlayMenu, "playCard");

        PointAndClickGame.setMaximumSize(new java.awt.Dimension(600, 400));
        PointAndClickGame.setMinimumSize(new java.awt.Dimension(600, 400));
        PointAndClickGame.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabelPACClock.setText("Clock");

        jButton1.setText("skip (debug)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabelColor.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabelColor.setText("Color");

        jButtonC1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/blue.png"))); // NOI18N
        jButtonC1.setBorderPainted(false);
        jButtonC1.setContentAreaFilled(false);
        jButtonC1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/bOver.png"))); // NOI18N
        jButtonC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonC1ActionPerformed(evt);
            }
        });

        jButtonC2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/green.png"))); // NOI18N
        jButtonC2.setBorderPainted(false);
        jButtonC2.setContentAreaFilled(false);
        jButtonC2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/gOver.png"))); // NOI18N
        jButtonC2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonC2ActionPerformed(evt);
            }
        });

        jButtonC3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/purple.png"))); // NOI18N
        jButtonC3.setBorderPainted(false);
        jButtonC3.setContentAreaFilled(false);
        jButtonC3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/pOver.png"))); // NOI18N
        jButtonC3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonC3ActionPerformed(evt);
            }
        });

        jButtonC4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/red.png"))); // NOI18N
        jButtonC4.setBorderPainted(false);
        jButtonC4.setContentAreaFilled(false);
        jButtonC4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/rOver.png"))); // NOI18N
        jButtonC4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonC4ActionPerformed(evt);
            }
        });

        jButtonC5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/yellow.png"))); // NOI18N
        jButtonC5.setBorderPainted(false);
        jButtonC5.setContentAreaFilled(false);
        jButtonC5.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/yOver.png"))); // NOI18N
        jButtonC5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonC5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PointAndClickGameLayout = new javax.swing.GroupLayout(PointAndClickGame);
        PointAndClickGame.setLayout(PointAndClickGameLayout);
        PointAndClickGameLayout.setHorizontalGroup(
            PointAndClickGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PointAndClickGameLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButtonC1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelColor)
                .addGap(87, 87, 87)
                .addComponent(jButtonC5)
                .addGap(49, 49, 49))
            .addGroup(PointAndClickGameLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jButtonC2)
                .addGap(47, 47, 47)
                .addComponent(jButtonC3)
                .addGap(49, 49, 49)
                .addComponent(jButtonC4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PointAndClickGameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PointAndClickGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelPACClock, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        PointAndClickGameLayout.setVerticalGroup(
            PointAndClickGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PointAndClickGameLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabelPACClock)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGroup(PointAndClickGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PointAndClickGameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonC3)
                        .addGap(47, 47, 47))
                    .addGroup(PointAndClickGameLayout.createSequentialGroup()
                        .addGroup(PointAndClickGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PointAndClickGameLayout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jLabelColor))
                            .addGroup(PointAndClickGameLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonC1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PointAndClickGameLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonC5)))
                        .addGroup(PointAndClickGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PointAndClickGameLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jButtonC2)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PointAndClickGameLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonC4)
                                .addGap(88, 88, 88))))))
        );

        ActionListener lPACGame = new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
                //Continuously update time here
                SimpleDateFormat bub = new SimpleDateFormat("MMMMMMMMM dd, yyyy  HH:mm:ss");
                Date current = new Date();
                String theDate = bub.format(current);
                jLabelPACClock.setText(theDate);
            }
        };

        Timer datePACGame = new Timer(500, lPACGame);
        datePACGame.start();

        ActionListener lPAC2 = new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
                //does game operations
                jLabelColor.setText(colorCh);
            }
        };
        Timer tPAC = new Timer(0, lPAC2);
        tPAC.start();

        mainPanel.add(PointAndClickGame, "PACgameCard");

        End.setMaximumSize(new java.awt.Dimension(600, 400));
        End.setMinimumSize(new java.awt.Dimension(600, 400));
        End.setName("end"); // NOI18N
        End.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel10.setText("Game Over");

        bTMButton.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        bTMButton.setText("End Hangman");
        bTMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTMButtonActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel13.setText("Score:");

        javax.swing.GroupLayout EndLayout = new javax.swing.GroupLayout(End);
        End.setLayout(EndLayout);
        EndLayout.setHorizontalGroup(
            EndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EndLayout.createSequentialGroup()
                .addGap(268, 268, 268)
                .addComponent(jLabel13)
                .addContainerGap(279, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EndLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(EndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EndLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(186, 186, 186))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EndLayout.createSequentialGroup()
                        .addComponent(bTMButton)
                        .addGap(203, 203, 203))))
        );
        EndLayout.setVerticalGroup(
            EndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EndLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jLabel10)
                .addGap(30, 30, 30)
                .addComponent(jLabel13)
                .addGap(54, 54, 54)
                .addComponent(bTMButton)
                .addContainerGap(121, Short.MAX_VALUE))
        );

        ActionListener listen4 = new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
                //Continuously update score

                jLabel13.setText("Score:" + score);

            }
        };
        Timer FScore = new Timer(0, listen4);
        // FScore.setRepeats(false);
        FScore.start();

        mainPanel.add(End, "endCard");

        HighScoreSet.setMaximumSize(new java.awt.Dimension(600, 400));
        HighScoreSet.setMinimumSize(new java.awt.Dimension(600, 400));
        HighScoreSet.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel12.setText("New High Score!");

        jLabel14.setText("Enter Initials (If not 3 letters or not text, ABC by default):");

        userName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        userName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameActionPerformed(evt);
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HighScoreSetLayout = new javax.swing.GroupLayout(HighScoreSet);
        HighScoreSet.setLayout(HighScoreSetLayout);
        HighScoreSetLayout.setHorizontalGroup(
            HighScoreSetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HighScoreSetLayout.createSequentialGroup()
                .addGroup(HighScoreSetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HighScoreSetLayout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(HighScoreSetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HighScoreSetLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(62, 62, 62))
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(HighScoreSetLayout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addGroup(HighScoreSetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HighScoreSetLayout.createSequentialGroup()
                                .addComponent(doneButton)
                                .addGap(19, 19, 19)))))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        HighScoreSetLayout.setVerticalGroup(
            HighScoreSetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HighScoreSetLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doneButton)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        mainPanel.add(HighScoreSet, "setCard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

      /**
     * method:PlayButtonActionPerformed
     * purpose:The methods does all the actions for the play button that calls the 
     * begin play method and opens the play card.
     */
   private void PlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayButtonActionPerformed
      // TODO add your handling code here:
      //Play
      beginPlay();
      CardLayout card = (CardLayout)mainPanel.getLayout();
      card.show(mainPanel, "playCard");
   }//GEN-LAST:event_PlayButtonActionPerformed

     /**
     * method:HighScoresButtonActionPerformed
     * purpose:The methods does all the actions for the High score button that opens the High score play card.
     */
   private void HighScoresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HighScoresButtonActionPerformed
      // TODO add your handling code here:
      //High scores - using pieces from my methods above to quickly grab highscores txt file
      File daHighScores = new File("highscores.txt");
      //debug
      System.out.println("highscores.txt exists? "+daHighScores.exists());
      if(!(daHighScores.exists()))
         try {
            hsCreateFile();
      } catch (FileNotFoundException ex) {
         Logger.getLogger(QuarterProject245.class.getName()).log(Level.SEVERE, null, ex);
      }
      
      //quickly update high scores page with whatever is in highscores text file
      FileReader readHighScores;
       try {
          readHighScores = new FileReader(daHighScores);
          BufferedReader scanHS = new BufferedReader(readHighScores);
          highscore1.setText(scanHS.readLine());
          highscore2.setText(scanHS.readLine());
          highscore3.setText(scanHS.readLine());
          highscore4.setText(scanHS.readLine());
          
       } catch (FileNotFoundException ex) {
          Logger.getLogger(QuarterProject245.class.getName()).log(Level.SEVERE, null, ex);
       } catch (IOException ex) {
          Logger.getLogger(QuarterProject245.class.getName()).log(Level.SEVERE, null, ex);
       }
      CardLayout card = (CardLayout)mainPanel.getLayout();
      card.show(mainPanel, "highscoresCard");
   }//GEN-LAST:event_HighScoresButtonActionPerformed
    /**
     * method:CreditsButtonActionPerformed
     * purpose:The methods does all the actions for the credit button that opens the credit play card.
     */
   private void CreditsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreditsButtonActionPerformed
      // TODO add your handling code here:
      // Credits
      // Displays panel over main menu
      CardLayout card = (CardLayout)mainPanel.getLayout();
      card.show(mainPanel, "creditsCard");
   }//GEN-LAST:event_CreditsButtonActionPerformed

   /**
     * method:backButton0ActionPerformed 
     * purpose:The methods does all the actions for the all the back button that takes the user back
     *  to the main menu play card.
     */
   private void backButton0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton0ActionPerformed
      // TODO add your handling code here:
      CardLayout card = (CardLayout)mainPanel.getLayout();
      card.show(mainPanel, "mainmenuCard");
   }//GEN-LAST:event_backButton0ActionPerformed

     /**
     * method:backButton1ActionPerformed 
     * purpose:The methods does all the actions for the all the back button that takes the user back
     *  to the main menu play card.
     */
   private void backButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton1ActionPerformed
      // TODO add your handling code here:
      CardLayout card = (CardLayout)mainPanel.getLayout();
      card.show(mainPanel, "mainmenuCard");
   }//GEN-LAST:event_backButton1ActionPerformed

   
   /**
    * 
    * @author Troy
    * Method name: updateHighScores
    * Method purpose: Updates high scores if user passed in has a good enough score.
    * A new high score file will be generated if one does not already exist.
    * Returns a string of the file's contents, so the jLabel may be updated.
    * @param userName
    * @param userScore
    * @return 
    * @throws java.io.FileNotFoundException
    * 
    */
   public static String updateHighScores(String userName, int userScore) throws FileNotFoundException, IOException {
      //for reading the highscores file
      File daHighScores = new File("highscores.txt");
      //debug
      System.out.println("highscores.txt exists? "+daHighScores.exists());
      if(!(daHighScores.exists()))
         hsCreateFile();
      
      //pass in the user's name and score
      int passedInVariable = userScore;
      String passedInName = userName;
      
      //Scan file for the scores and store in array
      int[] theScores = new int[4];
      //Scan file for the names and store in array
      String[] theNames = new String[4];
      //create a counter for the arrays
      int theCounter = 0;
      //set up the ability to read each line in the high scores
      FileReader readHighScores = new FileReader(daHighScores);
      BufferedReader scanHS = new BufferedReader(readHighScores);
      //read in the name of the person first through readNextLine check
      String readNextLine;
      
      //scans each line and takes the information it needs per line
      //(Name first, skips dots, score last)
      while((readNextLine = scanHS.readLine()) != null) {
         //first three characters of line are read
         theNames[theCounter] = readNextLine.substring(0, Math.min(readNextLine.length(), 3));
         
         //print it (debug)
         //System.out.println(""+theNames[theCounter]);
         
         //last three characters of line are read (after the last space)
         theScores[theCounter] = Integer.parseInt(readNextLine.substring(readNextLine.lastIndexOf(' ') + 1));
         
         //print it (debug)
         //System.out.println(""+theScores[theCounter]);
         
         theCounter++;
      }
      
      //show the results before writing to file (debug)
      System.out.println("Names old: " + Arrays.toString(theNames));
      System.out.println("Scores old: " + Arrays.toString(theScores));
      
      //update scores with user's score if they got a high score
      //accomplished through retrieving the index that they should overwrite
      theCounter = indexUserRankedInto(theScores, passedInVariable);
      
      //update the scores if the user beat one
      if(theCounter != -1) {
         //store old scores so they aren't overwritten
         String oldName = theNames[theCounter];
         int oldScore = theScores[theCounter];
         //update with new scores;
         theScores[theCounter] = passedInVariable;
         theNames[theCounter] = passedInName;
         //update counter to begin pushback
         theCounter++;
         //push back all high scores if needed
         for(int i = theCounter; i < theScores.length; i++) {
            //if able to push back, then push back scores
            if((i+1) < theScores.length) {
               String pushbackName = theNames[i];
               int pushbackScore = theScores[i];
               theNames[i] = oldName;
               theScores[i] = oldScore;
               oldName = pushbackName;
               oldScore = pushbackScore;
            }
         }
         //at end of array, update the last index with prev. index,
         //which will consequently remove the lowest score
         theNames[theNames.length - 1] = oldName;
         theScores[theScores.length - 1] = oldScore;
      }
      
      //weird case where all high scores are equal,
      //but the last one is zero,
      //and your score = the other scores,
      //so you have to be put on the last score:
      if(theCounter == 4) {
         if(theScores[theScores.length - 1] < passedInVariable) {
            theNames[theNames.length - 1] = passedInName;
            theScores[theScores.length - 1] = passedInVariable;
         }
      }
      
      //show the results after writing to file (debug)
      System.out.println("Names updated: " + Arrays.toString(theNames));
      System.out.println("Scores updated: " + Arrays.toString(theScores));
      
      //update the file
      hsModifyFile(theScores, theNames);
      
      //turn the file into a string and print it (debug for jlabel updating)
      String highscoresfile = new Scanner(new File("highscores.txt")).useDelimiter("\\Z").next();
      System.out.println("High scores file contents: \n"+highscoresfile);
      return highscoresfile;
   }
   
   /**
    * 
    * @author Troy
    * Method name: hsCreateFile
    * Method purpose: Creates high scores file if one does not exist
    * @throws java.io.FileNotFoundException
    * 
    */
   public static void hsCreateFile() throws FileNotFoundException {
      try (PrintWriter addHighScores = new PrintWriter("highscores.txt")) {
         addHighScores.println("ABC ... 0");
         addHighScores.println("ABC ... 0");
         addHighScores.println("ABC ... 0");
         addHighScores.println("ABC ... 0");
      }
      catch(FileNotFoundException e) {
         e.getMessage();
      }
   }
   
   /**
    * 
    * @author Troy
    * Method name: hsModifyFile
    * Method purpose: Modifies the high scores by updating it with any new changes.
    * This is accomplished through simply posting the array data,
    * which was either untouched (user did not high score),'
    * or has an index updated (user did get a high score).
    * @param scores
    * @param names
    * @throws FileNotFoundException
    * 
    */
   public static void hsModifyFile(int[] scores, String[] names) throws FileNotFoundException {
      try (PrintWriter addHighScores = new PrintWriter("highscores.txt")) {
         for(int i = 0; i < scores.length; i++)
            addHighScores.println(""+names[i]+" ... "+scores[i]+"");
      }
      catch(FileNotFoundException e) {
         e.getMessage();
      }
   }
   
   /**
    * 
    * @author Troy
    * Method name: indexUserRankedInto
    * Method purpose: Once scores are stored, see if user's high score is better than the others.
    * If so, update it and make sure it doesn't overwrite the lower scores.
    * If not, return a -1 to notify that the user didn't get a high score.
    * @param s
    * @param userScore
    * @return
    * 
    */
   public static int indexUserRankedInto(int[] s, int userScore) {
      boolean updatedScore = false;
      for(int i = 0; i < s.length; i++) {
         if(updatedScore == false) {
            if(s[i] < userScore) {
               //returns index of line that user got a high score on (0-3)
               return i;
            }
         }
      }
      //returns -1 if nothing updated
      return -1;
   }
   
   /**
     * method:bTMButtonActionPerformed 
     * purpose:The methods does all the actions for the all the end hangman button that takes the user back
     *  to the main menu play card and resets everything needed to play the game again.
     */
    private void bTMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTMButtonActionPerformed
        // TODO add your handling code here:
        
        //Troy - adding in high scores check
        File daHighScores = new File("highscores.txt");
        //debug
        System.out.println("highscores.txt exists? "+daHighScores.exists());
        if(!(daHighScores.exists()))
         try {
            hsCreateFile();
        } catch (FileNotFoundException ex) {
           Logger.getLogger(QuarterProject245.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //for deciding which card displays
        boolean setCardTrigger = false;
        
        try {
           //check if they at least beat the lowest score by pulling the file into a string,
           String highScoresFile = new Scanner(new File("highscores.txt")).useDelimiter("\\Z").next();
           //and then check the last integer in the file (lowest score)
           int lastScore = Integer.parseInt(highScoresFile.substring(highScoresFile.lastIndexOf(' ') + 1));
           //debug
           System.out.println("High score was: "+score+"\nLowest score read was: "+lastScore);
           if(lastScore < score) {
              //get their name and update the high scores, since they did it
              //debug
              System.out.println("Did this trigger?");
              CardLayout card = (CardLayout)mainPanel.getLayout();
              card.show(mainPanel, "setCard");
              System.out.println("Looks like it triggered");
              setCardTrigger = true;
           }
             
        } catch (FileNotFoundException ex) {
           Logger.getLogger(QuarterProject245.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Troy - if set card wasn't triggered, code will continue like normal
        if(setCardTrigger == false) {
            resetButtons();
            CardLayout card = (CardLayout)mainPanel.getLayout();
            card.show(mainPanel, "mainmenuCard");
            System.out.println("Did main menu trigger anyway...?");
        }
    }//GEN-LAST:event_bTMButtonActionPerformed
/**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void rButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rButtonActionPerformed
        rStatus = false;
        gameMoves();
        rButton.setEnabled(false);
    }//GEN-LAST:event_rButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void nButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nButtonActionPerformed
        nStatus = false;
        gameMoves();
        nButton.setEnabled(false);
    }//GEN-LAST:event_nButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void qButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qButtonActionPerformed
        qStatus = true;
        gameMoves();
        qButton.setEnabled(false);
    }//GEN-LAST:event_qButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void zButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zButtonActionPerformed
        zStatus = true;
        gameMoves();
        zButton.setEnabled(false);
    }//GEN-LAST:event_zButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void yButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yButtonActionPerformed
        yStatus = false;
        gameMoves();
        yButton.setEnabled(false);
    }//GEN-LAST:event_yButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void xButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xButtonActionPerformed
        xStatus = true;
        gameMoves();
        xButton.setEnabled(false);
    }//GEN-LAST:event_xButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void pButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButtonActionPerformed
        pStatus = false;
        gameMoves();
        pButton.setEnabled(false);
    }//GEN-LAST:event_pButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void wButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wButtonActionPerformed
        wStatus = true;
        gameMoves();
        wButton.setEnabled(false);
    }//GEN-LAST:event_wButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void oButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oButtonActionPerformed
        oStatus = true;
        gameMoves();
        oButton.setEnabled(false);
    }//GEN-LAST:event_oButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void vButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vButtonActionPerformed
        vStatus = true;
        gameMoves();
        vButton.setEnabled(false);
    }//GEN-LAST:event_vButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void uButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uButtonActionPerformed
        uStatus = false;
        gameMoves();
        uButton.setEnabled(false);
    }//GEN-LAST:event_uButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void tButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tButtonActionPerformed
        tStatus = false;
        gameMoves();
        tButton.setEnabled(false);
    }//GEN-LAST:event_tButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void sButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sButtonActionPerformed
        sStatus = false;
        gameMoves();
        sButton.setEnabled(false);
    }//GEN-LAST:event_sButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void mButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonActionPerformed
        mStatus = false;
        gameMoves();
        mButton.setEnabled(false);
    }//GEN-LAST:event_mButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void LButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LButtonActionPerformed
        lStatus = false;
        gameMoves();
        LButton.setEnabled(false);
    }//GEN-LAST:event_LButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void kButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kButtonActionPerformed
        kStatus = true;
        gameMoves();
        kButton.setEnabled(false);
    }//GEN-LAST:event_kButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActionPerformed
        jStatus = true;
        gameMoves();
        jButton.setEnabled(false);
    }//GEN-LAST:event_jButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void iButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iButtonActionPerformed
        iStatus = false;
        gameMoves();
        iButton.setEnabled(false);
    }//GEN-LAST:event_iButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void hButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hButtonActionPerformed
        hStatus = false;
        gameMoves();
        hButton.setEnabled(false);
    }//GEN-LAST:event_hButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void gButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gButtonActionPerformed
        gStatus = false;
        gameMoves();
        gButton.setEnabled(false);
    }//GEN-LAST:event_gButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void fButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fButtonActionPerformed
        fStatus = true;
        gameMoves();
        fButton.setEnabled(false);
    }//GEN-LAST:event_fButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void eButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eButtonActionPerformed
        eStatus = false;
        gameMoves();
        eButton.setEnabled(false);
    }//GEN-LAST:event_eButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void dButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dButtonActionPerformed
        dStatus = true;
        gameMoves();
        dButton.setEnabled(false);
    }//GEN-LAST:event_dButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void cButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cButtonActionPerformed
        cStatus = false;
        gameMoves();
        cButton.setEnabled(false);
    }//GEN-LAST:event_cButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void bButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bButtonActionPerformed
        bStatus = false;
        gameMoves();
        bButton.setEnabled(false);
    }//GEN-LAST:event_bButtonActionPerformed

    /**
     * method:(Letter button for the gameButtonActionPerformed 
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. Otherwise if the word is guessed correctly the game also end, Status turns to false and 
     * calls the games moves method. 
     */
    private void aButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aButtonActionPerformed
        aStatus = false;
        gameMoves();
        aButton.setEnabled(false);
    }//GEN-LAST:event_aButtonActionPerformed

    /**
     * method:skipButtonActionPerformed
     * purpose:The method skips the game by going to the end card and sets the score to zero.
     */
    private void skipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipButtonActionPerformed
        score = 0;
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "PACgameCard");
    }//GEN-LAST:event_skipButtonActionPerformed

   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      // TODO add your handling code here:
      CardLayout card = (CardLayout)mainPanel.getLayout();
      card.show(mainPanel, "endCard");
   }//GEN-LAST:event_jButton1ActionPerformed

   private void userNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_userNameActionPerformed

   private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
      // TODO add your handling code here:
      String uN = userName.getText();
      //Initials only; else default setting (ABC)
      if(uN.length() != 3)
         uN = "ABC";
       try {
          String newScores = updateHighScores(uN, score);
          System.out.println("The string (Debug): \n"+newScores);
          //scan through string
          Scanner scanny = new Scanner(newScores);
          highscore1.setText(scanny.nextLine());
          highscore2.setText(scanny.nextLine());
          highscore3.setText(scanny.nextLine());
          highscore4.setText(scanny.nextLine());       
       } catch (IOException ex) {
          Logger.getLogger(QuarterProject245.class.getName()).log(Level.SEVERE, null, ex);
       }
       
       //reset since it was skipped, then main menu
       resetButtons();
       CardLayout card = (CardLayout)mainPanel.getLayout();
       card.show(mainPanel, "mainmenuCard");
   }//GEN-LAST:event_doneButtonActionPerformed

    private void jButtonC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonC1ActionPerformed
        PACGmae();
    }//GEN-LAST:event_jButtonC1ActionPerformed

    private void jButtonC2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonC2ActionPerformed
         PACGmae();
    }//GEN-LAST:event_jButtonC2ActionPerformed

    private void jButtonC3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonC3ActionPerformed
         PACGmae();
    }//GEN-LAST:event_jButtonC3ActionPerformed

    private void jButtonC4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonC4ActionPerformed
         PACGmae();
    }//GEN-LAST:event_jButtonC4ActionPerformed

    private void jButtonC5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonC5ActionPerformed
       PACGmae();
    }//GEN-LAST:event_jButtonC5ActionPerformed
   
    /**
     * method:resetButtons
     * purpose:The method resets all variables, buttons and images to play the game again.
     */
    public void resetButtons()
   {
       count = 0;
       wordCount = 0;
       score = 100;
       randNumber = 0;
       aButton.setEnabled(true);
       bButton.setEnabled(true);
       cButton.setEnabled(true); 
       dButton.setEnabled(true); 
       eButton.setEnabled(true); 
       fButton.setEnabled(true); 
       gButton.setEnabled(true); 
       hButton.setEnabled(true); 
       iButton.setEnabled(true); 
       jButton.setEnabled(true);
       kButton.setEnabled(true);
       LButton.setEnabled(true);
       mButton.setEnabled(true);
       nButton.setEnabled(true);
       oButton.setEnabled(true);
       pButton.setEnabled(true);
       qButton.setEnabled(true);
       rButton.setEnabled(true);
       sButton.setEnabled(true);
       tButton.setEnabled(true);
       uButton.setEnabled(true);
       vButton.setEnabled(true);
       wButton.setEnabled(true);
       xButton.setEnabled(true);
       yButton.setEnabled(true);
       zButton.setEnabled(true);
        ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter1.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
                 jLabelLetter2.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
                 jLabelLetter3.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
                 jLabelLetter4.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
                 jLabelLetter5.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
                 jLabelLetter6.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
                 jLabelLetter7.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
                    jLabelLetter8.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
   }
    
     /**
     * method:resetStatus
     * purpose:The method resets the status of the buttons to walk through each letter.
     */
   public void resetStatus()
   {
         //sets values true
   aStatus = true;
   bStatus = true;
   cStatus = true;
   dStatus = true;
   eStatus = true;
   fStatus = true;
   gStatus = true;
   hStatus = true;
   iStatus = true;
   jStatus = true;
   kStatus = true;
   lStatus = true;
   mStatus = true;
   nStatus = true;
   oStatus = true;
   pStatus = true;
  qStatus = true;
   rStatus = true;
   sStatus = true;
   tStatus = true;
   uStatus = true;
   vStatus = true;
   wStatus = true;
   xStatus = true;
   yStatus = true;
  zStatus = true;
   }
   
     /**
     * method:beginPlay
     * purpose:The method sets the random number for the index and the word to a
     * variable and the color to another variable.
     */
   public void beginPlay()
   {
       Random rand = new Random();
       randNumber = rand.nextInt(A_SIZE);
       
       playWord = words[randNumber];
          System.out.println(playWord);
          
          colorCh = colors[randNumber];
          System.out.println(colorCh);
      
   }
   
    /**
     * method:gameMoves
     * purpose:The methods does all the actions for the all the letters to play the hangman 
     * game that checks the word to the letter and if the user guess incorrectly more than six times
     * the game ends. It also paints the image of the letter that has action listeners to perform the task 
     * in real time.
     */
   public void gameMoves()
   {
       System.out.println(count);
      switch(randNumber)
             {
             case 0: //abstract
                 if (aStatus == false)
                 {
                     System.out.println("good");
                     wordCount +=2;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/A.png")));
                 jLabelLetter6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/A.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                     
                 }
                 else if (bStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                      ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/B.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (sStatus == false)
                 {
                     System.out.println("good");
                    ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/S.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (tStatus == false)
                 {
                     System.out.println("good");
                     wordCount+=2;
                      ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/T.png")));
                 jLabelLetter8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/T.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (rStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                      ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/R.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (cStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                      ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/C.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else
                 {
                      System.out.println("bad");
                      count++;
                      score = score - 10;
                 }
                 resetStatus();
                   break;
             case 1: //cemetery
                 if (cStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/C.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (eStatus == false)
                 {
                     System.out.println("good");
                     wordCount +=3;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/E.png")));
                 jLabelLetter4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/E.png")));
                 jLabelLetter6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/E.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (mStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/M.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (tStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/T.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (rStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/R.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (yStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Y.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else
                 {
                      System.out.println("bad");
                      count++;
                     score = score - 10;
                 }
                 resetStatus();
                   break;
             case 2: //nurse 
                 if (nStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/N.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (uStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/U.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (rStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/R.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (sStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/S.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (eStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/E.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else
                 {
                      System.out.println("bad");
                      count++;
                      score = score - 10;
                 }
                 resetStatus();
                   break;
             
             case 3://pharmacy
                 if (pStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/P.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (hStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/H.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (aStatus == false)
                 {
                     System.out.println("good");
                     wordCount +=2;
                     ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/A.png")));
                  jLabelLetter6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/A.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (rStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                          ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/R.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (mStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                          ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/M.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (cStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                            ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/C.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (yStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                            ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Y.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else
                 {
                      System.out.println("bad");
                      count++;
                      score = score - 10;
                 }
                 resetStatus();
                   break;   
            
             case 4://climbing
                 if (cStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                            ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/C.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (lStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                            ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/L.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (iStatus == false)
                 {
                     System.out.println("good");
                     wordCount+=2;
                            ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/I.png")));
                 jLabelLetter6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/I.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (mStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                             ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/M.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (bStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                             ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/B.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (nStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                             ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/N.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else if (gStatus == false)
                 {
                     System.out.println("good");
                     ++wordCount;
                             ActionListener listen5 = new ActionListener() {
                public void actionPerformed(ActionEvent ev) {
        
                 jLabelLetter8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/G.png")));
                 }
                 };

                Timer endTimer = new Timer(0, listen5);
                endTimer.setRepeats(false);
                endTimer.start();
                 }
                 else
                 {
                      System.out.println("bad");
                      count++;
                      score = score - 10;
                 }
                 resetStatus();
                   break;
             }
       if (count == 6)
       {
        CardLayout card = (CardLayout)mainPanel.getLayout();
      card.show(mainPanel, "PACgameCard");
        System.out.println("The score is :" + score);
       }
   }
   
   public void PACGmae()
   {
       countPAC++;
   }
    /**
     * method:main
     * purpose: sets the thread to play the game and sets the board panels visible.
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuarterProject245.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuarterProject245.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuarterProject245.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuarterProject245.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuarterProject245().setVisible(true);
            }
        });
        
    }
    
    private int count = 0;
    private int countPAC =0;
    private int wordCount = 0;
    private int score = 100; 
    private int randNumber = 0;
    private final int A_SIZE = 5;
    private String [] words = new String[A_SIZE];
    private String [] colors = new String [A_SIZE];
    private String playWord;
    private String colorCh;
    //status for game
   private boolean aStatus = true;
   private boolean bStatus = true;
   private boolean cStatus = true;
   private boolean dStatus = true;
   private boolean eStatus = true;
   private boolean fStatus = true;
   private boolean gStatus = true;
   private boolean hStatus = true;
   private boolean iStatus = true;
   private boolean jStatus = true;
   private boolean kStatus = true;
   private boolean lStatus = true;
   private boolean mStatus = true;
   private boolean nStatus = true;
   private boolean oStatus = true;
   private boolean pStatus = true;
  private boolean qStatus = true;
   private boolean rStatus = true;
   private boolean sStatus = true;
   private boolean tStatus = true;
   private boolean uStatus = true;
   private boolean vStatus = true;
   private boolean wStatus = true;
   private boolean xStatus = true;
   private boolean yStatus = true;
  private boolean zStatus = true;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreditsButton;
    private javax.swing.JPanel CreditsMenu;
    private javax.swing.JPanel End;
    private javax.swing.JPanel HighScoreSet;
    private javax.swing.JButton HighScoresButton;
    private javax.swing.JPanel HighScoresMenu;
    private javax.swing.JButton LButton;
    private javax.swing.JPanel MainMenu;
    private javax.swing.JButton PlayButton;
    private javax.swing.JPanel PlayMenu;
    private javax.swing.JPanel PointAndClickGame;
    private javax.swing.JLabel ProjectTitle;
    private javax.swing.JPanel SplashPage;
    private javax.swing.JLabel TeamLogo;
    private javax.swing.JLabel TeamName;
    private javax.swing.JButton aButton;
    private javax.swing.JButton bButton;
    private javax.swing.JButton bTMButton;
    private javax.swing.JButton backButton0;
    private javax.swing.JButton backButton1;
    private javax.swing.JButton cButton;
    private javax.swing.JButton dButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JButton eButton;
    private javax.swing.JButton fButton;
    private javax.swing.JButton gButton;
    private javax.swing.JButton hButton;
    private javax.swing.JLabel highscore1;
    private javax.swing.JLabel highscore2;
    private javax.swing.JLabel highscore3;
    private javax.swing.JLabel highscore4;
    private javax.swing.JButton iButton;
    private javax.swing.JButton jButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonC1;
    private javax.swing.JButton jButtonC2;
    private javax.swing.JButton jButtonC3;
    private javax.swing.JButton jButtonC4;
    private javax.swing.JButton jButtonC5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelColor;
    private javax.swing.JLabel jLabelHangman;
    private javax.swing.JLabel jLabelLetter1;
    private javax.swing.JLabel jLabelLetter2;
    private javax.swing.JLabel jLabelLetter3;
    private javax.swing.JLabel jLabelLetter4;
    private javax.swing.JLabel jLabelLetter5;
    private javax.swing.JLabel jLabelLetter6;
    private javax.swing.JLabel jLabelLetter7;
    private javax.swing.JLabel jLabelLetter8;
    private javax.swing.JLabel jLabelPACClock;
    private javax.swing.JLabel jLabelSpcae;
    private javax.swing.JButton kButton;
    private javax.swing.JButton mButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nButton;
    private javax.swing.JButton oButton;
    private javax.swing.JButton pButton;
    private javax.swing.JButton qButton;
    private javax.swing.JButton rButton;
    private javax.swing.JButton sButton;
    private javax.swing.JButton skipButton;
    private javax.swing.JButton tButton;
    private javax.swing.JButton uButton;
    private javax.swing.JTextField userName;
    private javax.swing.JButton vButton;
    private javax.swing.JButton wButton;
    private javax.swing.JButton xButton;
    private javax.swing.JButton yButton;
    private javax.swing.JButton zButton;
    // End of variables declaration//GEN-END:variables
}
